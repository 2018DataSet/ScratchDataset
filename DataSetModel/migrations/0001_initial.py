# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-11-21 07:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('content_type_id', models.IntegerField()),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthtokenToken1',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'authtoken_token1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField()),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=75)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AvatarAvatar1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.IntegerField()),
                ('avatar', models.CharField(max_length=1024)),
                ('date_uploaded', models.DateTimeField()),
            ],
            options={
                'db_table': 'avatar_avatar1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_id', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('content', models.TextField()),
                ('audio', models.CharField(blank=True, max_length=100, null=True)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('order', models.IntegerField()),
            ],
            options={
                'db_table': 'course_chapter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseLesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('introduction', models.TextField()),
                ('short_introduction', models.TextField(blank=True, null=True)),
                ('audio', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.CharField(max_length=100)),
                ('permission', models.CharField(max_length=2)),
                ('task', models.TextField()),
            ],
            options={
                'db_table': 'course_lesson',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseLessonClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'course_lesson_classes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseUserbehaviorlesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=50)),
                ('lesson_id', models.IntegerField()),
                ('chapter_id', models.IntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('click_audio', models.IntegerField()),
            ],
            options={
                'db_table': 'course_userbehaviorlesson',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ctmodel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ap_score', models.IntegerField()),
                ('parallelism_score', models.IntegerField()),
                ('synchronization_score', models.IntegerField()),
                ('flow_control_score', models.IntegerField()),
                ('user_interactivity_score', models.IntegerField()),
                ('logical_thinking_score', models.IntegerField()),
                ('data_representation_score', models.IntegerField()),
                ('total', models.IntegerField()),
                ('code_organization_score', models.IntegerField()),
                ('content_score', models.IntegerField()),
                ('hint', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'CTModel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
                ('content_type_id', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoCommentFlags1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag', models.CharField(max_length=30)),
                ('flag_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_comment_flags1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoComments1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.TextField()),
                ('user_name', models.CharField(max_length=50)),
                ('user_email', models.CharField(max_length=254)),
                ('user_url', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('submit_date', models.DateTimeField()),
                ('ip_address', models.CharField(blank=True, max_length=39, null=True)),
                ('is_public', models.IntegerField()),
                ('is_removed', models.IntegerField()),
            ],
            options={
                'db_table': 'django_comments1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession1',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoSite1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'django_site1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GuardianGroupobjectpermission1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.CharField(max_length=255)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.AuthGroup1')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.AuthPermission1')),
            ],
            options={
                'db_table': 'guardian_groupobjectpermission1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GuardianUserobjectpermission1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.CharField(max_length=255)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.AuthPermission1')),
            ],
            options={
                'db_table': 'guardian_userobjectpermission1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('input_description', models.TextField()),
                ('output_description', models.TextField()),
                ('hint', models.CharField(blank=True, max_length=100, null=True)),
                ('permission', models.CharField(max_length=2)),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('time_limit', models.IntegerField()),
                ('memory_limit', models.IntegerField()),
                ('submission_number', models.IntegerField()),
                ('accepted_number', models.IntegerField()),
                ('acrate', models.FloatField(db_column='ACrate')),
                ('level', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'OJ_problem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjProblemClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'OJ_problem_classes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjProblemTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.OjProblem')),
            ],
            options={
                'db_table': 'OJ_problem_tags',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_time', models.DateTimeField()),
                ('code', models.TextField()),
                ('result', models.IntegerField()),
                ('info', models.TextField()),
                ('language', models.CharField(max_length=20)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.OjProblem')),
            ],
            options={
                'db_table': 'OJ_submission',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjSubmissiondailystatistical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_day', models.DateField()),
                ('submission_count', models.IntegerField()),
            ],
            options={
                'db_table': 'OJ_submissiondailystatistical',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('count', models.IntegerField()),
            ],
            options={
                'db_table': 'OJ_tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OjTestcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('input_test', models.CharField(max_length=100)),
                ('output_test', models.CharField(max_length=100)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.OjProblem')),
            ],
            options={
                'db_table': 'OJ_testcase',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PinaxBadgesBadgeaward1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField()),
                ('slug', models.CharField(max_length=255)),
                ('level', models.IntegerField()),
                ('image', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'pinax_badges_badgeaward1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessListtest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('labels', models.TextField()),
            ],
            options={
                'db_table': 'production_process_listtest',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforaddblock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('type', models.CharField(max_length=100)),
                ('op', models.CharField(max_length=100)),
                ('loc', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforaddblock',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforbackdrop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addbac_time', models.DateTimeField()),
                ('addbac_add', models.CharField(max_length=100)),
                ('addbac_odd', models.CharField(max_length=100)),
                ('addbac_name', models.CharField(max_length=100)),
                ('addbac_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforbackdrop',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_time', models.DateTimeField()),
                ('change_change', models.CharField(max_length=100)),
                ('change_odd', models.CharField(max_length=100)),
                ('change_pername', models.CharField(max_length=100)),
                ('change_nowname', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforchange',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforchangeop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_time', models.DateTimeField()),
                ('change_change', models.CharField(max_length=100)),
                ('change_odd', models.CharField(max_length=100)),
                ('change_perop', models.CharField(max_length=100)),
                ('change_nowop', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforchangeop',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforcostume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addcos_time', models.DateTimeField()),
                ('addcos_add', models.CharField(max_length=100)),
                ('addcos_odd', models.CharField(max_length=100)),
                ('addcos_name', models.CharField(max_length=100)),
                ('addcos_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforcostume',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordelbac',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delbac_time', models.DateTimeField()),
                ('delbac_del', models.CharField(max_length=100)),
                ('delbac_odd', models.CharField(max_length=100)),
                ('delbac_name', models.CharField(max_length=100)),
                ('delbac_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordelbac',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordelblock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('del_time', models.DateTimeField()),
                ('del_del', models.CharField(max_length=100)),
                ('del_op', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordelblock',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordelcos',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delcos_time', models.DateTimeField()),
                ('delcos_del', models.CharField(max_length=100)),
                ('delcos_odd', models.CharField(max_length=100)),
                ('delcos_name', models.CharField(max_length=100)),
                ('delcos_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordelcos',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordelsnd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delsnd_time', models.DateTimeField()),
                ('delsnd_del', models.CharField(max_length=100)),
                ('delsnd_odd', models.CharField(max_length=100)),
                ('delsnd_name', models.CharField(max_length=100)),
                ('delsnd_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordelsnd',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordelspr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delspr_time', models.DateTimeField()),
                ('delspr_del', models.CharField(max_length=100)),
                ('delspr_odd', models.CharField(max_length=100)),
                ('delspr_name', models.CharField(max_length=100)),
                ('delspr_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordelspr',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListfordoubleclickblock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dou_time', models.DateTimeField()),
                ('dou_name', models.CharField(max_length=100)),
                ('dou_odd', models.CharField(max_length=100)),
                ('dou_op', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listfordoubleclickblock',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforsound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addsnd_time', models.DateTimeField()),
                ('addsnd_add', models.CharField(max_length=100)),
                ('addsnd_odd', models.CharField(max_length=100)),
                ('addsnd_name', models.CharField(max_length=100)),
                ('addsnd_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforsound',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionListforspr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addspr_time', models.DateTimeField()),
                ('addspr_add', models.CharField(max_length=100)),
                ('addspr_odd', models.CharField(max_length=100)),
                ('addspr_name', models.CharField(max_length=100)),
                ('addspr_from', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'production_process_production_listforspr',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProductionProcessProductionProsess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listforaddblock', models.TextField(blank=True, null=True)),
                ('listforbackdrop', models.TextField(blank=True, db_column='listforBackdrop', null=True)),
                ('listforchange', models.TextField(blank=True, db_column='listforChange', null=True)),
                ('listforchangeop', models.TextField(blank=True, db_column='listforChangeOp', null=True)),
                ('listforcostume', models.TextField(blank=True, db_column='listforCostume', null=True)),
                ('listfordoubleclickblock', models.TextField(blank=True, db_column='listforDoubleclickBlock', null=True)),
                ('listforsound', models.TextField(blank=True, db_column='listforSound', null=True)),
                ('listforspr', models.TextField(blank=True, db_column='listforSpr', null=True)),
                ('listfordelbac', models.TextField(blank=True, null=True)),
                ('listfordelblock', models.TextField(blank=True, null=True)),
                ('listfordelcos', models.TextField(blank=True, null=True)),
                ('listfordelsnd', models.TextField(blank=True, null=True)),
                ('listfordelspr', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'production_process_production_prosess',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QaAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('pub_date', models.DateTimeField()),
                ('updated', models.DateTimeField()),
                ('answer', models.IntegerField()),
                ('positive_votes', models.IntegerField()),
                ('negative_votes', models.IntegerField()),
                ('total_points', models.IntegerField()),
            ],
            options={
                'db_table': 'qa_answer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QaAnswervote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.QaAnswer')),
            ],
            options={
                'db_table': 'qa_answervote',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QaQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('pub_date', models.DateTimeField()),
                ('update_date', models.DateTimeField()),
                ('closed', models.IntegerField()),
                ('positive_votes', models.IntegerField()),
                ('negative_votes', models.IntegerField()),
                ('total_points', models.IntegerField()),
            ],
            options={
                'db_table': 'qa_question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QaQuestionvote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.QaQuestion')),
            ],
            options={
                'db_table': 'qa_questionvote',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiAnticheating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
            ],
            options={
                'db_table': 'scratch_api_anticheating',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiAntlrscore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ap_score', models.IntegerField()),
                ('parallelism_score', models.IntegerField()),
                ('synchronization_score', models.IntegerField()),
                ('flow_control_score', models.IntegerField()),
                ('user_interactivity_score', models.IntegerField()),
                ('logical_thinking_score', models.IntegerField()),
                ('data_representation_score', models.IntegerField()),
                ('total', models.IntegerField()),
                ('code_organization_score', models.IntegerField()),
                ('content_score', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_antlrscore',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiBaseuser',
            fields=[
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('is_admin', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_baseuser',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiBaseuser2Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'scratch_api_baseuser2session',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiBaseuserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'scratch_api_baseuser_groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiBaseuserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'scratch_api_baseuser_user_permissions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=40)),
                ('code', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'scratch_api_class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiClassTeacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_field', models.ForeignKey(db_column='class_id', on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiClass')),
            ],
            options={
                'db_table': 'scratch_api_class_teacher',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCommenteachother',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_score', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_commenteachother',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('create_time', models.DateTimeField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('stop_time', models.DateTimeField(blank=True, null=True)),
                ('content', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'scratch_api_competition',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetitionAdvisers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetition')),
            ],
            options={
                'db_table': 'scratch_api_competition_advisers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetitionquestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=100)),
                ('detail', models.TextField(blank=True, null=True)),
                ('create_time', models.DateTimeField()),
                ('limit_score', models.IntegerField()),
                ('limit_small_score', models.TextField(blank=True, null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetition')),
            ],
            options={
                'db_table': 'scratch_api_competitionquestion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetitionquestionProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competitionquestion', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetitionquestion')),
            ],
            options={
                'db_table': 'scratch_api_competitionquestion_production',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetitionRater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetition')),
            ],
            options={
                'db_table': 'scratch_api_competition_rater',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiCompetitionuser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delay_time', models.IntegerField()),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetition')),
            ],
            options={
                'db_table': 'scratch_api_competitionuser',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiDatavisualization',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('create_time', models.DateTimeField()),
                ('description', models.TextField()),
                ('fileurl', models.CharField(db_column='fileUrl', max_length=500)),
                ('is_active', models.IntegerField()),
                ('charttitle1', models.CharField(db_column='chartTitle1', max_length=50)),
                ('chartanalysistitle1', models.CharField(db_column='chartAnalysisTitle1', max_length=50)),
                ('chartanalysisdescription1', models.TextField(blank=True, db_column='chartAnalysisDescription1', null=True)),
                ('chartfileurl1', models.CharField(db_column='chartFileUrl1', max_length=500)),
                ('charttitle2', models.CharField(db_column='chartTitle2', max_length=50)),
                ('chartanalysistitle2', models.CharField(db_column='chartAnalysisTitle2', max_length=50)),
                ('chartanalysisdescription2', models.TextField(blank=True, db_column='chartAnalysisDescription2', null=True)),
                ('chartfileurl2', models.CharField(db_column='chartFileUrl2', max_length=500)),
                ('charttitle3', models.CharField(db_column='chartTitle3', max_length=50)),
                ('chartanalysistitle3', models.CharField(db_column='chartAnalysisTitle3', max_length=50)),
                ('chartanalysisdescription3', models.TextField(blank=True, db_column='chartAnalysisDescription3', null=True)),
                ('chartfileurl3', models.CharField(db_column='chartFileUrl3', max_length=500)),
                ('charttitle4', models.CharField(db_column='chartTitle4', max_length=50)),
                ('chartanalysistitle4', models.CharField(db_column='chartAnalysisTitle4', max_length=50)),
                ('chartanalysisdescription4', models.TextField(blank=True, db_column='chartAnalysisDescription4', null=True)),
                ('chartfileurl4', models.CharField(db_column='chartFileUrl4', max_length=500)),
            ],
            options={
                'db_table': 'scratch_api_datavisualization',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiDownloadsource',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('fileurl', models.CharField(db_column='fileUrl', max_length=500)),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_downloadsource',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiFavoritegallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_time', models.TimeField()),
            ],
            options={
                'db_table': 'scratch_api_favoritegallery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiFavoriteproduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_time', models.TimeField()),
            ],
            options={
                'db_table': 'scratch_api_favoriteproduction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiFormatclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField()),
                ('class_num', models.IntegerField()),
                ('is_interest', models.IntegerField()),
                ('add_time', models.DateTimeField()),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_formatclass',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiFormatschool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('province', models.CharField(max_length=10)),
                ('city', models.CharField(max_length=10)),
                ('district', models.CharField(max_length=20)),
                ('add_time', models.DateTimeField()),
                ('is_active', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_formatschool',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiGallery',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.IntegerField()),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('image', models.CharField(blank=True, max_length=100, null=True)),
                ('hit', models.BigIntegerField()),
                ('like', models.BigIntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField()),
                ('stop_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'scratch_api_gallery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiGalleryproduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_checked', models.IntegerField()),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiGallery')),
            ],
            options={
                'db_table': 'scratch_api_galleryproduction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiLikegallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(blank=True, max_length=50, null=True)),
                ('favorite_time', models.TimeField()),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiGallery')),
            ],
            options={
                'db_table': 'scratch_api_likegallery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiLikeproduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(blank=True, max_length=50, null=True)),
                ('favorite_time', models.TimeField()),
            ],
            options={
                'db_table': 'scratch_api_likeproduction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('permissions', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'scratch_api_position',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiProduction',
            fields=[
                ('id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('file', models.CharField(max_length=100)),
                ('is_active', models.IntegerField()),
                ('create_time', models.DateTimeField()),
                ('update_time', models.DateTimeField()),
                ('image', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('comment_eachother_all_score', models.IntegerField()),
                ('hit', models.BigIntegerField()),
                ('level', models.IntegerField()),
                ('lft', models.IntegerField()),
                ('like', models.BigIntegerField()),
                ('operation_instructions', models.TextField(blank=True, null=True)),
                ('rght', models.IntegerField()),
                ('tree_id', models.IntegerField()),
                ('production_duration', models.IntegerField()),
                ('script_count', models.IntegerField()),
                ('sprite_count', models.IntegerField()),
                ('is_competition', models.IntegerField()),
                ('belong_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiClass')),
                ('format_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatclass')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.CourseLesson')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction')),
            ],
            options={
                'db_table': 'scratch_api_production',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiProductionhint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hint', models.CharField(max_length=100)),
                ('production_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction')),
            ],
            options={
                'db_table': 'scratch_api_productionhint',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiProductionProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motion_num', models.IntegerField()),
                ('looklike_num', models.IntegerField()),
                ('sounds_num', models.IntegerField()),
                ('draw_num', models.IntegerField()),
                ('event_num', models.IntegerField()),
                ('control_num', models.IntegerField()),
                ('sensor_num', models.IntegerField()),
                ('operate_num', models.IntegerField()),
                ('more_num', models.IntegerField()),
                ('data_num', models.IntegerField()),
                ('sprite_num', models.IntegerField()),
                ('backdrop_num', models.IntegerField()),
                ('snd_num', models.IntegerField()),
                ('production_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction', unique=True)),
            ],
            options={
                'db_table': 'scratch_api_production_profile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiQuestionproductionscore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('score_time', models.DateTimeField()),
                ('is_adviser', models.IntegerField()),
                ('small_score', models.TextField(blank=True, null=True)),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetitionquestion')),
            ],
            options={
                'db_table': 'scratch_api_questionproductionscore',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiSchool',
            fields=[
                ('school_name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'scratch_api_school',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiTeacherscore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('production_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction', unique=True)),
            ],
            options={
                'db_table': 'scratch_api_teacherscore',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiUserClasses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_field', models.ForeignKey(db_column='class_id', on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiClass')),
            ],
            options={
                'db_table': 'scratch_api_user_classes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiUserFormatClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formatclass', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatclass')),
            ],
            options={
                'db_table': 'scratch_api_user_format_class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiUuidtaggeditem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=32)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1')),
            ],
            options={
                'db_table': 'scratch_api_uuidtaggeditem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaggitTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'taggit_tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaggitTaggeditem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.TaggitTag')),
            ],
            options={
                'db_table': 'taggit_taggeditem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WebshellScript1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('source', models.TextField()),
            ],
            options={
                'db_table': 'webshell_script1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiTeacher',
            fields=[
                ('baseuser_ptr', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='DataSetModel.ScratchApiBaseuser')),
                ('email', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('school', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'scratch_api_teacher',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScratchApiUser',
            fields=[
                ('baseuser_ptr', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='DataSetModel.ScratchApiBaseuser')),
                ('name', models.CharField(max_length=30)),
                ('sex', models.CharField(blank=True, max_length=30, null=True)),
                ('grade', models.CharField(blank=True, max_length=30, null=True)),
                ('student_id', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateTimeField()),
                ('birthday', models.DateField(blank=True, null=True)),
                ('local_city', models.CharField(blank=True, max_length=30, null=True)),
                ('local_district', models.CharField(blank=True, max_length=30, null=True)),
                ('local_province', models.CharField(blank=True, max_length=30, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('self_introduction', models.TextField(blank=True, null=True)),
                ('coding_duration', models.IntegerField()),
                ('enrollment_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('format_school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatschool')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='school', to='DataSetModel.ScratchApiSchool')),
                ('school_second', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='school_second', to='DataSetModel.ScratchApiSchool')),
            ],
            options={
                'db_table': 'scratch_api_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ThreadedcommentsComment1',
            fields=[
                ('comment_ptr', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='DataSetModel.DjangoComments1')),
                ('title', models.TextField()),
                ('tree_path', models.CharField(max_length=500)),
                ('newest_activity', models.DateTimeField(blank=True, null=True)),
                ('last_child', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='last_child1', to='DataSetModel.ThreadedcommentsComment1')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent1', to='DataSetModel.ThreadedcommentsComment1')),
            ],
            options={
                'db_table': 'threadedcomments_comment1',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='scratchapiuuidtaggeditem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.TaggitTag'),
        ),
        migrations.AddField(
            model_name='scratchapilikeproduction',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='scratchapilikeproduction',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapilikegallery',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapigalleryproduction',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='scratchapigallery',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapiformatclass',
            name='format_school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatschool'),
        ),
        migrations.AddField(
            model_name='scratchapifavoriteproduction',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='scratchapifavoritegallery',
            name='gallery',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiGallery'),
        ),
        migrations.AddField(
            model_name='scratchapidownloadsource',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapidatavisualization',
            name='uploader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapicompetitionquestionproduction',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='scratchapicommenteachother',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='scratchapiclass',
            name='school_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiSchool'),
        ),
        migrations.AddField(
            model_name='scratchapibaseuseruserpermissions',
            name='baseuser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapibaseuseruserpermissions',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.AuthPermission1'),
        ),
        migrations.AddField(
            model_name='scratchapibaseusergroups',
            name='baseuser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='scratchapibaseusergroups',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.AuthGroup1'),
        ),
        migrations.AddField(
            model_name='scratchapibaseuser2session',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser', unique=True),
        ),
        migrations.AddField(
            model_name='scratchapiantlrscore',
            name='production_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction', unique=True),
        ),
        migrations.AddField(
            model_name='scratchapianticheating',
            name='competition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiCompetition'),
        ),
        migrations.AddField(
            model_name='qaquestionvote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='qaquestion',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='qaanswervote',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='qaanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.QaQuestion'),
        ),
        migrations.AddField(
            model_name='qaanswer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionprosess',
            name='production_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction', unique=True),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforspr',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforsound',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordoubleclickblock',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordelspr',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordelsnd',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordelcos',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordelblock',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistfordelbac',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforcostume',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforchangeop',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforchange',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforbackdrop',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='productionprocessproductionlistforaddblock',
            name='productions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiProduction'),
        ),
        migrations.AddField(
            model_name='pinaxbadgesbadgeaward1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='ojproblemtags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.OjTag'),
        ),
        migrations.AddField(
            model_name='ojproblemclasses',
            name='formatclass',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatclass'),
        ),
        migrations.AddField(
            model_name='ojproblemclasses',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.OjProblem'),
        ),
        migrations.AddField(
            model_name='guardianuserobjectpermission1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AlterUniqueTogether(
            name='djangocontenttype1',
            unique_together=set([('app_label', 'model')]),
        ),
        migrations.AlterUniqueTogether(
            name='djangocontenttype',
            unique_together=set([('app_label', 'model')]),
        ),
        migrations.AddField(
            model_name='djangocomments1',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1'),
        ),
        migrations.AddField(
            model_name='djangocomments1',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoSite1'),
        ),
        migrations.AddField(
            model_name='djangocomments1',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='djangocommentflags1',
            name='comment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoComments1'),
        ),
        migrations.AddField(
            model_name='djangocommentflags1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='djangoadminlog1',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1'),
        ),
        migrations.AddField(
            model_name='djangoadminlog1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='courselessonclasses',
            name='formatclass',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatclass'),
        ),
        migrations.AddField(
            model_name='courselessonclasses',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.CourseLesson'),
        ),
        migrations.AddField(
            model_name='coursechapter',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.CourseLesson'),
        ),
        migrations.AddField(
            model_name='avataravatar1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser'),
        ),
        migrations.AddField(
            model_name='authtokentoken1',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiBaseuser', unique=True),
        ),
        migrations.AddField(
            model_name='authpermission1',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.DjangoContentType1'),
        ),
        migrations.CreateModel(
            name='ScratchApiAdviser',
            fields=[
                ('teacher_ptr', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='DataSetModel.ScratchApiTeacher')),
                ('local_province', models.CharField(blank=True, max_length=30, null=True)),
                ('local_city', models.CharField(blank=True, max_length=30, null=True)),
                ('local_district', models.CharField(blank=True, max_length=30, null=True)),
                ('is_boss', models.IntegerField()),
            ],
            options={
                'db_table': 'scratch_api_adviser',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='scratchapiuserformatclass',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapiuserclasses',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapiuser',
            name='student_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='student_class', to='DataSetModel.ScratchApiClass'),
        ),
        migrations.AddField(
            model_name='scratchapiuser',
            name='student_class_second',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='student_class_second', to='DataSetModel.ScratchApiClass'),
        ),
        migrations.AddField(
            model_name='scratchapiteacher',
            name='format_school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiFormatschool'),
        ),
        migrations.AddField(
            model_name='scratchapiteacher',
            name='position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiPosition'),
        ),
        migrations.AddField(
            model_name='scratchapiquestionproductionscore',
            name='rater',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AddField(
            model_name='scratchapiproduction',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapilikeproduction',
            unique_together=set([('user', 'production', 'token')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapilikegallery',
            unique_together=set([('user', 'gallery', 'token')]),
        ),
        migrations.AddField(
            model_name='scratchapiformatschool',
            name='chief',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AddField(
            model_name='scratchapiformatclass',
            name='chief',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AddField(
            model_name='scratchapifavoriteproduction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapifavoritegallery',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapicompetitionuser',
            name='tutor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AddField(
            model_name='scratchapicompetitionuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapicompetitionrater',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapicompetitionquestionproduction',
            unique_together=set([('competitionquestion', 'production')]),
        ),
        migrations.AddField(
            model_name='scratchapicompetition',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AddField(
            model_name='scratchapicommenteachother',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='scratchapiclassteacher',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiclass',
            unique_together=set([('school_name', 'class_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapibaseuseruserpermissions',
            unique_together=set([('baseuser', 'permission')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapibaseusergroups',
            unique_together=set([('baseuser', 'group')]),
        ),
        migrations.AddField(
            model_name='scratchapianticheating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AlterUniqueTogether(
            name='qaquestionvote',
            unique_together=set([('user', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='qaanswervote',
            unique_together=set([('user', 'answer')]),
        ),
        migrations.AlterUniqueTogether(
            name='qaanswer',
            unique_together=set([('user', 'question')]),
        ),
        migrations.AddField(
            model_name='ojsubmissiondailystatistical',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AddField(
            model_name='ojsubmission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiUser'),
        ),
        migrations.AlterUniqueTogether(
            name='ojproblemtags',
            unique_together=set([('problem', 'tag')]),
        ),
        migrations.AlterUniqueTogether(
            name='ojproblemclasses',
            unique_together=set([('problem', 'formatclass')]),
        ),
        migrations.AddField(
            model_name='ojproblem',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AlterUniqueTogether(
            name='guardianuserobjectpermission1',
            unique_together=set([('user', 'permission', 'object_pk')]),
        ),
        migrations.AlterUniqueTogether(
            name='guardiangroupobjectpermission1',
            unique_together=set([('group', 'permission', 'object_pk')]),
        ),
        migrations.AlterUniqueTogether(
            name='djangocommentflags1',
            unique_together=set([('user', 'comment', 'flag')]),
        ),
        migrations.AlterUniqueTogether(
            name='courselessonclasses',
            unique_together=set([('lesson', 'formatclass')]),
        ),
        migrations.AddField(
            model_name='courselesson',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiTeacher'),
        ),
        migrations.AlterUniqueTogether(
            name='coursechapter',
            unique_together=set([('lesson', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='authpermission1',
            unique_together=set([('content_type', 'codename')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiuserformatclass',
            unique_together=set([('user', 'formatclass')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiuserclasses',
            unique_together=set([('user', 'class_field')]),
        ),
        migrations.AddField(
            model_name='scratchapiteacher',
            name='belong_adviser',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiAdviser'),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiformatschool',
            unique_together=set([('province', 'city', 'district', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiformatclass',
            unique_together=set([('format_school', 'grade', 'class_num', 'is_interest')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapicompetitionuser',
            unique_together=set([('competition', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapicompetitionrater',
            unique_together=set([('competition', 'teacher')]),
        ),
        migrations.AddField(
            model_name='scratchapicompetitionadvisers',
            name='adviser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='DataSetModel.ScratchApiAdviser'),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapiclassteacher',
            unique_together=set([('class_field', 'teacher')]),
        ),
        migrations.AlterUniqueTogether(
            name='scratchapicompetitionadvisers',
            unique_together=set([('competition', 'adviser')]),
        ),
    ]
